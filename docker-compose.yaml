version: '3.8'

services:
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: [ "start-dev" ]
    volumes:
      - keycloakdata:/var/lib/keycloak/data

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: reviews
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093 # Refer to 'kafka' service name
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 # Use 'kafka' here if other services connect to it by name
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  vault:
    image: hashicorp/vault:1.16
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: devroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-root-token-id=devroot -dev-listen-address=0.0.0.0:8200
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki  # This is critical for storage
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - type: bind
        source: ./promtail-config.yaml
        target: /etc/promtail/config.yml
      - /var/log:/var/log # Host's log directory
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # Docker container logs
      - ./logs:/logs # Your application's log directory (if logs are written here)
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    depends_on:
      - loki

  # Uncomment and adjust these services if you want them to run within Docker Compose
  # review-service:
  #   build: ./review-service
  #   environment:
  #    - LOG_FILE_PATH=/logs/review-service.log
  #    - LOG_LEVEL=INFO
  #    - REVIEW_SERVICE_LOG_LEVEL=DEBUG
  #    - SPRING_PROFILES_ACTIVE=prod
  #   volumes:
  #     - logs:/logs
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - redis
  #     - vault

  # review-dashboard:
  #   build: ./review-dashboard
  #   environment:
  #     - LOG_FILE_PATH=/logs/review-dashboard.log
  #     - LOG_LEVEL=INFO
  #     - REVIEW_DASHBOARD_LOG_LEVEL=DEBUG
  #     - SPRING_PROFILES_ACTIVE=prod
  #   volumes:
  #     - logs:/logs
  #   depends_on:
  #     - review-service

# To run review-service and review-dashboard locally (not in Docker):
# - Do NOT run these services via docker-compose
# - Run them with Maven or your IDE
# - Logs will be written to ./logs/ (bind-mount this directory to Promtail)

volumes:
  pgdata:
  minio-data:
  kafka_data:
  keycloakdata:
  logs:
  loki_data: